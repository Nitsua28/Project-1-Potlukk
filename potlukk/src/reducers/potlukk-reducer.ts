import { SignInForm } from "../pages/signin-page";


enum Allergen {
    MILK,
    EGG,
    FISH,
    SHELLFISH,
    SOY,
    WHEAT,
    TREE_NUT
}

// Generated by https://quicktype.io

export type Error = {
    detail: Detail[];
}

export type Detail = {
    loc:  Array<number | string>;
    msg:  string;
    type: string;
}


// Generated by https://quicktype.io

export type LukkerUserInfo = {
    userId:    number;
    username:  string;
    fname:     string;
    lname:     string;
    allergies: string[];
}

// Generated by https://quicktype.io

export type CreateUserForm = {
    username:  string;
    password:  string;
    fname:     string;
    lname:     string;
    allergies: string[];
}

export type LukkerUserState = {
    currentUser: LukkerUserInfo
    userList: LukkerUserInfo[]
    error: boolean
    newUserAdded: boolean
}

//Reducer Actions 
export type GetUsersAction = {type:"GET_USERS", payload:LukkerUserInfo[]}
export type AddUserAction = {type:"ADD_USER", payload:LukkerUserInfo}
export type SetErrorAction = {type:"ERROR", payload:boolean}
export type ClearErrorAction = {type:"CLEAR_ERROR"}
export type ClearUserAdded = {type:"CLEAR_USER_ADDED"}
export type SetUser = {type:"SET_USER", payload:LukkerUserInfo}
//Saga Actions
export type CreateUserAction = {type:"CREATE_USER", payload:CreateUserForm}
export type SignInUser = {type:"SIGN_IN_USER", payload:SignInForm}
// Action types
export type PotlukkActions = CreateUserAction | GetUsersAction | AddUserAction | SetErrorAction
        | ClearErrorAction | ClearUserAdded | SetUser | SignInUser;

const initialState: LukkerUserState = {
    currentUser: {
        userId: 0,
        username: "",
        fname: "",
        lname: "",
        allergies: []
    },
    userList:[],
    error:false,
    newUserAdded:false
}

export function lukkerUserReducer(state: LukkerUserState = initialState, action: PotlukkActions):LukkerUserState{
    const nextState: LukkerUserState = JSON.parse(JSON.stringify(state));

    switch(action.type){
        case "ADD_USER":{
            nextState.userList.push(action.payload)
            nextState.newUserAdded = true
            nextState.currentUser = action.payload
            return nextState
        }
        case "GET_USERS": {

            return nextState
        }
        case "ERROR":{
            nextState.error = action.payload
            return nextState
        }
        case "CLEAR_ERROR":{
            nextState.error = false;
            return nextState
        }
        case "CLEAR_USER_ADDED":{
            nextState.newUserAdded = false;
            return nextState
        }
        case "SET_USER":{
            nextState.currentUser = action.payload
            return nextState
        }
        default:
            return nextState
    }


}


