


export const jsonInitialState: string = `{
    "userName": { 
        "value": "", 
        "touched": false, 
        "hasError": true, 
        "error": "" 
    },
    "password": { "value": "", "touched": false, "hasError": true, "error": "" },
    "confirmPassword": { "value": "", "touched": false, "hasError": true, "error": "" },
    "fname": { "value": "", "touched": false, "hasError": false, "error": "" },
    "lname": { "value": "", "touched": false, "hasError": false, "error": "" },
    "milk": { "value": false, "touched": false, "hasError": false, "error": "" },
    "egg": { "value": false, "touched": false, "hasError": false, "error": "" },
    "fish": { "value": false, "touched": false, "hasError": false, "error": "" },
    "shellfish": { "value": false, "touched": false, "hasError": false, "error": "" },
    "soy": { "value": false, "touched": false, "hasError": false, "error": "" },
    "wheat": { "value": false, "touched": false, "hasError": false, "error": "" },
    "treenut": { "value": false, "touched": false, "hasError": false, "error": "" },
    "isFormValid": false
  }`

// Generated by https://quicktype.io

export type VerificationForm = {
    userName:        ValueVerify;
    password:        ValueVerify;
    confirmPassword: ValueVerify;
    fname:           ValueVerify;
    lname:           ValueVerify;
    milk:            ValueVerify;
    egg:             ValueVerify;
    fish:            ValueVerify;
    shellfish:       ValueVerify;
    soy:             ValueVerify;
    wheat:           ValueVerify;
    treenut:         ValueVerify;
    isFormValid:     boolean;
}

export type ValueVerify = {
    value:    string | boolean;
    touched:  boolean;
    hasError: boolean;
    error:    string;
}

export type UpdateUserNameAction = {type:"UPDATE_USER_NAME", payload:string}
export type UpdatePasswordAction = {type:"UPDATE_PASSWORD", payload:string}
export type UpdateVerifyPasswordAction = {type:"UPDATE_VERIFY_PASSWORD", payload:string}
export type UpdateLastNameAction = {type:"UPDATE_LAST_NAME", payload:string}
export type UpdateFirstNameAction = {type:"UPDATE_FIRST_NAME", payload:string}
export type UpdateMilkAction = {type:"UPDATE_MILK", payload:boolean}
export type UpdateEggAction = {type:"UPDATE_EGG", payload:boolean}
export type UpdateFishAction = {type:"UPDATE_FISH", payload:boolean}
export type UpdateshellfishAction = {type:"UPDATE_SHELLFISH", payload:boolean}
export type UpdatesoyAction = {type:"UPDATE_SOY", payload:boolean}
export type UpdateWheatAction = {type:"UPDATE_WHEAT", payload:boolean}
export type UpdateTreenutAction = {type:"UPDATE_TREENUT", payload:boolean}

export type FormActions = UpdateUserNameAction | UpdatePasswordAction | UpdateVerifyPasswordAction | UpdateLastNameAction
                        | UpdateFirstNameAction | UpdateMilkAction | UpdateEggAction | UpdateFishAction | UpdateshellfishAction
                        | UpdatesoyAction | UpdateWheatAction | UpdateTreenutAction ;



export function formsReducer(state: VerificationForm, action: FormActions): VerificationForm {
    const nextState: VerificationForm = JSON.parse(JSON.stringify(state));

    switch(action.type){
        case "UPDATE_USER_NAME":{
            nextState.userName.value = action.payload;
            nextState.userName.touched = true;
            if(action.payload.length < 3){
                nextState.userName.hasError = true;
                nextState.userName.error = "User name must have at least 3 characters"
            }else{
                nextState.userName.hasError = false;
                nextState.userName.error = ""
            }
            return nextState
        }
        case "UPDATE_PASSWORD":{
            nextState.password.value = action.payload;
            nextState.password.touched = true;
            if(action.payload.length < 10){
                nextState.password.hasError = true; 
                nextState.password.error = "Password must have at least 10 characters"
            }
            //console.log(action.payload.trim().search(/[!-@[-`{-~h]/))
            if(action.payload.trim().search(/[!-@[-`{-~h]/) < 0 && action.payload.length > 9){
                nextState.password.hasError = true;
                nextState.password.error = "Password must have at least 1 special character"
            }
            if(action.payload.search(/[!-@[-`{-~h]/g) > 0 && action.payload.length > 9){
                nextState.password.hasError = false;
                nextState.password.error = ""
            }
            return nextState
        }
        case "UPDATE_VERIFY_PASSWORD":{
            nextState.confirmPassword.value = action.payload;
            nextState.confirmPassword.touched = true;
            if(action.payload !== nextState.password.value){
                nextState.confirmPassword.hasError = true;
                nextState.confirmPassword.error = "Passwords must match!!!"
            }else{
                nextState.confirmPassword.hasError = false;
                nextState.confirmPassword.error = "";
            }
            return nextState
        }
        case "UPDATE_LAST_NAME":{
            nextState.lname.value = action.payload
            return nextState
        }
        case "UPDATE_FIRST_NAME":{
            nextState.fname.value = action.payload
            return nextState
        }
        case "UPDATE_MILK":{
            nextState.milk.value = action.payload
            return nextState
        }
        case "UPDATE_EGG":{
            nextState.egg.value = action.payload
            return nextState
        }
        case "UPDATE_FISH":{
            nextState.fish.value = action.payload
            return nextState
        }
        case "UPDATE_SHELLFISH":{
            nextState.shellfish.value = action.payload
            return nextState
        }
        case "UPDATE_SOY":{
            nextState.soy.value = action.payload
            return nextState
        }
        case "UPDATE_WHEAT":{
            nextState.wheat.value = action.payload
            return nextState
        }
        case "UPDATE_TREENUT":{
            nextState.treenut.value = action.payload
            return nextState
        }
    }
    
  }