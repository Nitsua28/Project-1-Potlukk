import { SignInForm } from "../pages/signin-page";
import { PotlukkEditInputState } from "./potluck-edit-form-reducer";
import { PotlukkCreationInputState } from "./potluck-form-reducer";
export enum PotlukkStatus {
    SCHEDULED,
    CANCELLED
}

export enum Allergen {
    MILK,
    EGG,
    FISH,
    SHELLFISH,
    SOY,
    WHEAT,
    TREE_NUT
}

export enum InvitationStatus {
    ACCEPTED,
    MAYBE,
    DECLINED,
    PENDING
}

// Generated by https://quicktype.io

export type Error = {
    detail: Detail[];
}

export type Detail = {
    loc:  Array<number | string>;
    msg:  string;
    type: string;
}


// Generated by https://quicktype.io


export type LukkerUserInfo = {
    userId:    number;
    username:  string;
    fname:     string;
    lname:     string;
    allergies: string[];
}

export type Dishes = {
    name: string,
    description: string,
    broughtBy: number,
    serves: number,
    allergens: Allergen
}
// Generated by https://quicktype.io

export type CreateUserForm = {
    username:  string;
    password:  string;
    fname:     string;
    lname:     string;
    allergies: string[];
}
export type Invitation = {
    status: InvitationStatus,
    potlukker: LukkerUserInfo,
}

export type InvitationSendInput = {
    potlukkId: number,
    potlukkerId: number
}
//state held in this reducer
export type LukkerUserState = {
    currentUser: LukkerUserInfo
    currentPotluck: Potlukk
    userList: LukkerUserInfo[]

    error: boolean
    newUserAdded: boolean

    potlukkList: Potlukk[]
    invited: LukkerUserInfo[]
    filteredPotlukkList: Potlukk[]
}

export type Potlukk = {
    potlukkId: number,
    details: PotlukkCreationInputState,
    host: LukkerUserInfo,
    invitations: Invitation[],
    dishes: Dishes[]

}

//Reducer Actions 
export type GetUsersAction = {type:"GET_USERS", payload: LukkerUserInfo[]}
export type AddUserAction = {type:"ADD_USER", payload:LukkerUserInfo}
export type InviteUserAction = {type: "INVITE_USER_ACTION", payload: string}
export type DeleteInvitedAction = {type: "DELETE_INVITED_ACTION", payload: string}
export type SetErrorAction = {type:"ERROR", payload:boolean}
export type ClearErrorAction = {type:"CLEAR_ERROR"}
export type ClearUserAdded = {type:"CLEAR_USER_ADDED"}
export type SetUser = {type:"SET_USER", payload:LukkerUserInfo}
export type SetCurrentPotlukk = {type: "SET_CURRENT_POTLUKK", payload: Potlukk}
export type GetUserByName = {type:"GET_USER_BY_NAME", payload: string}
export type AddPotlukk = {type:"ADD_POTLUKK", payload: Potlukk}
export type ClearInvited = {type:"CLEAR_INVITED"}
export type GetPotlukkDetails = {type:"GET_POTLUKK_DETAILS",payload:Potlukk[]}
//Saga Actions
export type CreateUserAction = {type:"CREATE_USER", payload:CreateUserForm}
export type SignInUser = {type:"SIGN_IN_USER", payload:SignInForm}
export type RequestGetUsersAction = {type:"REQUEST_GET_USERS", payload: string}
export type RequestUserById = {type: "REQUEST_USER_BY_ID", payload: string}
export type RequestCreatePotlukk = {type: "REQUEST_CREATE_POTLUKK", payload: PotlukkCreationInputState}
export type RequestEditPotlukk = {type: "REQUEST_EDIT_POTLUKK", payload: PotlukkEditInputState}
export type RequestGetPotlukkById = {type: "REQUEST_GET_POTLUKK_BY_ID", payload: string}
export type Refresh_Users = {type: "REFRESH_USERS"}
export type RequestPotlukkDetailsAction = {type:"REQUEST_POTLUKK_DETAILS"}
// Action types
export type PotlukkActions = CreateUserAction | GetUsersAction | AddUserAction | SetErrorAction
        | ClearErrorAction | ClearUserAdded | SetUser | SignInUser |
        RequestGetUsersAction | GetUserByName | Refresh_Users | AddPotlukk | RequestCreatePotlukk
        | InviteUserAction | DeleteInvitedAction | RequestEditPotlukk | ClearInvited | RequestPotlukkDetailsAction 
        | GetPotlukkDetails | SetCurrentPotlukk | RequestGetPotlukkById;


export const initialState: LukkerUserState = {
    currentUser: {
        userId: 0,

        username:  '',
        fname:     '',
        lname:     '',
        allergies: []
    },
    currentPotluck: {
        potlukkId: 178540,
        details: {
          details:{
          title: "chicken",
          location: "atPotlukkk",
          status: "SCHEDULED",
          description: "peiece of meat",
          isPublic: false,
          time: 9,
          tags: [
            "akdna"
          ]
        },
        hostId: 56452
      },
        host: {
          userId: 56452,
          username: "Host",
          fname: "Joe",
          lname: "Biden",
          allergies: [
            "MILK"
          ]
        },
        invitations: [

        ],
        dishes: []
      },
    userList:[],
    error:false,
    newUserAdded:false,
    potlukkList: [],
    invited: [],
    filteredPotlukkList: []
}

export function lukkerUserReducer(state: LukkerUserState = initialState, action: PotlukkActions):LukkerUserState{
    const nextState: LukkerUserState = JSON.parse(JSON.stringify(state));

    switch(action.type){
        case "GET_POTLUKK_DETAILS":{
            const result = action.payload.filter(filterByAttending)
            localStorage.setItem("filteredList",JSON.stringify(result))
            //console.log(result)
            nextState.filteredPotlukkList = result
            return nextState
        }

        case "ADD_USER":{
            nextState.userList.push(action.payload)
            nextState.newUserAdded = true
            nextState.currentUser = action.payload
            return nextState
        }
        case "GET_USERS": {
            nextState.userList = action.payload
            return nextState
        }
        case "ADD_POTLUKK": {
            nextState.potlukkList.push(action.payload)
            return nextState
        }

        case "ERROR":{
            nextState.error = action.payload
            return nextState
        }
        case "CLEAR_ERROR":{
            nextState.error = false;
            return nextState
        }
        case "CLEAR_USER_ADDED":{
            nextState.newUserAdded = false;
            return nextState
        }
        case "SET_USER":{
            nextState.currentUser = action.payload
            if(action.payload.userId===0){
                localStorage.removeItem("username")
                localStorage.removeItem("userid")
            }else{
                localStorage.setItem("username",action.payload.username)
                localStorage.setItem("userid",action.payload.userId.toString())
            }
            return nextState
        }
        case "INVITE_USER_ACTION":{
            let users: LukkerUserInfo[] = nextState.userList.filter((item)=>item.userId === Number(action.payload));
    
            (!(nextState.invited.some((item) => item.userId === users[0].userId))) &&
            nextState.invited.push(users[0])
                //some method implement
            return nextState
        }
        case "DELETE_INVITED_ACTION":{
            let users: LukkerUserInfo[] = nextState.invited.filter((item)=>item.userId !== Number(action.payload));
            nextState.invited = users
            return nextState
        }
        case "CLEAR_INVITED":{
            nextState.invited = []
            return nextState
        }
        case "SET_CURRENT_POTLUKK":{
            nextState.currentPotluck = action.payload

            return nextState
        }
        default:
            return nextState
    }

    function filterByAttending(potlukk:Potlukk){
        const result = potlukk.host.userId === Number(localStorage.getItem("userid")) || 
        potlukk.invitations.some(e=>e.potlukker.userId === Number(localStorage.getItem("userid")))
        //console.log(nextState.currentUser)
        return result
    }

}











